// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/handler_interface.go

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlerInterface is a mock of HandlerInterface interface.
type MockHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerInterfaceMockRecorder
}

// MockHandlerInterfaceMockRecorder is the mock recorder for MockHandlerInterface.
type MockHandlerInterfaceMockRecorder struct {
	mock *MockHandlerInterface
}

// NewMockHandlerInterface creates a new mock instance.
func NewMockHandlerInterface(ctrl *gomock.Controller) *MockHandlerInterface {
	mock := &MockHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerInterface) EXPECT() *MockHandlerInterfaceMockRecorder {
	return m.recorder
}

// BroadcastMessages mocks base method.
func (m *MockHandlerInterface) BroadcastMessages() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMessages")
}

// BroadcastMessages indicates an expected call of BroadcastMessages.
func (mr *MockHandlerInterfaceMockRecorder) BroadcastMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessages", reflect.TypeOf((*MockHandlerInterface)(nil).BroadcastMessages))
}

// Connection mocks base method.
func (m *MockHandlerInterface) Connection(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connection", c)
}

// Connection indicates an expected call of Connection.
func (mr *MockHandlerInterfaceMockRecorder) Connection(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockHandlerInterface)(nil).Connection), c)
}

// MockWebsocketHandlerInterface is a mock of WebsocketHandlerInterface interface.
type MockWebsocketHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketHandlerInterfaceMockRecorder
}

// MockWebsocketHandlerInterfaceMockRecorder is the mock recorder for MockWebsocketHandlerInterface.
type MockWebsocketHandlerInterfaceMockRecorder struct {
	mock *MockWebsocketHandlerInterface
}

// NewMockWebsocketHandlerInterface creates a new mock instance.
func NewMockWebsocketHandlerInterface(ctrl *gomock.Controller) *MockWebsocketHandlerInterface {
	mock := &MockWebsocketHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockWebsocketHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketHandlerInterface) EXPECT() *MockWebsocketHandlerInterfaceMockRecorder {
	return m.recorder
}

// HandleMessages mocks base method.
func (m *MockWebsocketHandlerInterface) HandleMessages() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessages")
}

// HandleMessages indicates an expected call of HandleMessages.
func (mr *MockWebsocketHandlerInterfaceMockRecorder) HandleMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessages", reflect.TypeOf((*MockWebsocketHandlerInterface)(nil).HandleMessages))
}

// HandleWebSocket mocks base method.
func (m *MockWebsocketHandlerInterface) HandleWebSocket(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleWebSocket", c)
}

// HandleWebSocket indicates an expected call of HandleWebSocket.
func (mr *MockWebsocketHandlerInterfaceMockRecorder) HandleWebSocket(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWebSocket", reflect.TypeOf((*MockWebsocketHandlerInterface)(nil).HandleWebSocket), c)
}
